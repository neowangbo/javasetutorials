/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.martian.apps.javasetutorials.essential.config;

import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Date;
import java.util.Properties;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Load and save a property file.<br>
 * https://docs.oracle.com/javase/tutorial/essential/environment/properties.html<br>
 * 
 * How to get input from console<br>
 * https://www.mkyong.com/java/how-to-read-input-from-console-java/<br>
 * 
 * @author b5wang
 */
public class EditProperties {
    
    private static final String MESSAGE_QUESTION = "Input [key=value] property or [q] for quit: ";
    
    private static final String MESSAGE_EXCEPTION = "Can't understand command. ";
    
    private static final String MESSAGE_SAVE = "Save properties into ";
    
    private static final String MESSAGE_QUIT = "Exit!";
    
    private static final String COMMAND_QUIT = "q";
    
    private static final String KEY_VALUE_SPARATOR = "=";
    
    public static void main(String[] args){
        String propPath = args[0];
        
        //byBufferedReader(propPath);
        //bySanner(propPath);
        byConsole(propPath);
    }
    
    private static String[] getKVPair(String line){
        String[] kv = new String[2];
        int index = line.indexOf(KEY_VALUE_SPARATOR);
        kv[0] = line.substring(0, index).trim();
        kv[1] = line.substring(index + 1).trim();        
        return kv;
    }
    
    private static void addKV(Properties props, String line){
        String[] kv = getKVPair(line);
        props.put(kv[0], kv[1]);
    }
    
    private static void saveAndQuit(Properties props, String path) throws IOException{
        try(FileOutputStream out = new FileOutputStream(path)){
            Date time = new Date();
            props.store(out, "Generated by " + EditProperties.class.getName());
            // it will add timestamp automatically.
        }
        System.out.println(MESSAGE_SAVE + path);
        System.out.println(MESSAGE_QUIT);
        System.exit(0);
    }
    
    /**
     * Classic way
     */
    private static void byBufferedReader(String path){
        System.out.println("@Implemented by BufferedReader");
        try(BufferedReader br = new BufferedReader(new InputStreamReader(System.in))){
            
            Properties props = new Properties();
            
            while(true){
                System.out.println(MESSAGE_QUESTION);
                
                String line = br.readLine();
                if(COMMAND_QUIT.equalsIgnoreCase(line)){
                    // save and quit
                    saveAndQuit(props,path);
                }else if(line.indexOf(KEY_VALUE_SPARATOR) > 0){
                    // add into properties
                    addKV(props,line);
                }else{
                    System.out.println(MESSAGE_EXCEPTION + line);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(EditProperties.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * After JDK1.5
     */
    private static void bySanner(String path){
        System.out.println("@Implemented by Scanner");
        try(Scanner scanner = new Scanner(System.in)){
            
            Properties props = new Properties();
            
            while(true){
                System.out.println(MESSAGE_QUESTION);
                
                String line = scanner.nextLine();
                if(COMMAND_QUIT.equalsIgnoreCase(line)){
                    // save and quit
                    saveAndQuit(props,path);
                }else if(line.indexOf(KEY_VALUE_SPARATOR) > 0){
                    // add into properties
                    addKV(props,line);
                }else{
                    System.out.println(MESSAGE_EXCEPTION + line);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(EditProperties.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * After JDK1.6
     */
    private static void byConsole(String path){
        System.out.println("@Implemented by Console");
        try{
            
            Properties props = new Properties();
            
            while(true){
                System.out.println(MESSAGE_QUESTION);
                
                String line = System.console().readLine();
                if(COMMAND_QUIT.equalsIgnoreCase(line)){
                    // save and quit
                    saveAndQuit(props,path);
                }else if(line.indexOf(KEY_VALUE_SPARATOR) > 0){
                    // add into properties
                    addKV(props,line);
                }else{
                    System.out.println(MESSAGE_EXCEPTION + line);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(EditProperties.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
